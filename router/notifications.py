from datetime import datetime
from fastapi import APIRouter, Depends, HTTPException
from typing import Optional
from pydantic import BaseModel
from core.models.database import SessionLocal, Base, engine
from core.models.post import Post, Tag, PostComment, VotesComment, VotesPost
from sqlalchemy.orm import Session
from router.login import verify_token
from router.post import Error400, Error401, Error404, Error500


Base.metadata.create_all(bind=engine)

router = APIRouter(
    prefix="/blog",
    tags=["notifications"]
)


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()



class NotificationSchema(BaseModel):
    from_id: int = 1
    first_name: str = "Jane"
    last_name: str = "Doe"
    created: datetime = datetime.now()
    type: str = "comment"
    status: str = "new"
    note: str = "more detail generated by the server"
    url: str = "https://localhost:3000/post/1"
    post_id: int = 1
    post_title: str = "This is a post title"

class ResponseListNotification(BaseModel):
    notifications: list[NotificationSchema] = [NotificationSchema()]
    status: str = "success"
    code: int = 200
    message: str = "Successfully retrieved notifications"


class ResponseNotification(BaseModel):
    status: str = "success"
    code: int = 200
    message: str = "Successfully changed notification status"

    

@router.get("/notifications/{user_id}", responses={400: { "model" : Error400 }, 401: { "model" : Error401 }, 404: { "model" : Error404 }, 422: {"model": Error400}, 500: { "model" : Error500 }})
async def get_user_notifications(user_id: int, token: str, db: Session = Depends(get_db)) -> ResponseListNotification:
    # await verify_token(token)
    # comment = db.query(PostComment).filter(PostComment.id == id).first()
    return { "all" : []}


@router.post("/notifications/{notifications_id}/dismiss", responses={400: { "model" : Error400 }, 401: { "model" : Error401 }, 404: { "model" : Error404 }, 422: {"model": Error400}, 500: { "model" : Error500 }})
async def mark_as_viewed(notifications_id: int, token : str, db: Session = Depends(get_db)) -> ResponseNotification:
    # await verify_token(token)
    return { "new notification": {}}

@router.post("/notifications/dismiss/all", responses={400: { "model" : Error400 }, 401: { "model" : Error401 }, 404: { "model" : Error404 }, 422: {"model": Error400}, 500: { "model" : Error500 }})
async def mark_all_as_viewed(notifications_id: int, token : str, db: Session = Depends(get_db)) -> ResponseNotification:
    # await verify_token(token)
    return { "new notification": {}}